(
   (0000 0000 NOP
      (desc "No operation; equivalent to B IP+2")
   )
   (0001 0001 PARK
      (desc "Does nothing on the current pipe until an interrupt is triggered, or the CPU is reset")
   )
   (0002 0002 SYNC
      (desc "Forces the next instruction to be atomic")
   )
   (0004 0004 UNFRAME
      (desc "Add immediate to stack pointer")
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535))
   )
   (0005 0005 FRAME
      (desc "Subtract immediate from stack pointer")
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535))
   )
   (0006 0006 B
      (desc "IP-relative unsigned register unconditional branch")
      (param (address insn) (base sr ip) (offset reg16 (index 0 0) (unsigned)))
   )
   (0007 0007 B
      (desc "IP-relative signed register unconditional branch")
      (param (address insn) (base sr ip) (offset reg16 (index 0 0) (signed)))
   )
   (0008 0008 UNFRAME
      (desc "Add 16b register to stack pointer")
      (param (base reg16 (index 0 0) (unsigned)))
   )
   (0009 0009 FRAME
      (desc "Subtract 16b register from stack pointer")
      (param (base reg16 (index 0 0) (unsigned)))
   )
   (0100 0100 NOPE
      (desc "No operation; equivalent to B IP+3")
   )
   (0101 013C B
      (desc "IP-relative unconditional branch")
      (param (address insn) (base sr ip) (offset constant) (offset-src opcode) (range 4 63))
   )
   (013D 017B B
      (desc "IP-relative unconditional branch")
      (param (address insn) (base sr ip) (offset constant) (offset-src opcode) (range -64 -2))
   )
   (017C 017C B
      (desc "IP-relative unconditional branch")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 63 318))
   )
   (017D 017D B
      (desc "IP-relative unconditional branch")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -319 -64))
   )
   (017E 017E B
      (desc "IP-relative unconditional branch")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 65535))
   )
   (017F 017F B
      (desc "IP-relative unconditional branch")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range -65536 -1))
   )
   (0180 0180 B
      (desc "Absolute unconditional branch")
      (param (base constant) (base-src IP_plus_2_32) (range 0 4294967295))
   )
   (0181 0181 CALL
      (desc "Call IP-relative subroutine")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 65535))
   )
   (0182 0182 CALL
      (desc "Call IP-relative subroutine")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range -65536 -1))
   )
   (0183 0183 CALL
      (desc "Call absolute-addressed subroutine")
      (param (address insn) (base constant) (base-src IP_plus_2_32) (range 0 4294967295))
   )
   (0184 0184 BP
      (desc "Branch to start of current page")
   )
   (0185 0185 BPN
      (desc "Branch to start of next page")
   )
   (0186 0186 BB
      (desc "Branch to start of current 256-byte-aligned block")
   )
   (0187 0187 BBN
      (desc "Branch to start of next 256-byte-aligned block")
   )
   (0188 0188 EAB
      (desc "Enable address translation + register unconditional branch")
      (param (address insn) (base reg32 (index 0 0)))
   )
   (0189 0189 DAB
      (desc "Disable address translation + register unconditional branch")
      (param (address insn) (base reg32 (index 0 0)))
   )
   (018A 018A UNSLEEP
      (desc "Disable sleep mode")
   )
   (018B 018B SLEEP
      (desc "Enable sleep mode")
   )
   (018C 018C IRET
      (desc "Return from interrupt")
   )
   (018D 018D FRET
      (desc "Return from fault handler and retry operation")
   )
   (018E 018E IFEX
      (desc "Exit interrupt or fault handler without changing registersets or retrying the faulted operation")
   )
   (018F 018F RET
      (desc "Return from subroutine")
   )
   (0200 023C B Z
      (desc "IP-relative branch if zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src opcode) (range 3 63))
   )
   (023D 027B B Z
      (desc "IP-relative branch if zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src opcode) (range -64 -2))
   )
   (027C 027C B Z
      (desc "IP-relative branch if zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (027D 027D B Z
      (desc "IP-relative branch if zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (027E 027E B NZ
      (desc "IP-relative branch if not zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (027F 027F B NZ
      (desc "IP-relative branch if not zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0300 033C B NZ
      (desc "IP-relative branch if nonzero")
      (param (address insn) (base sr ip) (offset constant) (offset-src opcode) (range 3 63))
   )
   (033D 037B B NZ
      (desc "IP-relative branch if nonzero")
      (param (address insn) (base sr ip) (offset constant) (offset-src opcode) (range -64 -2))
   )
   (037C 037C B Z
      (desc "IP-relative branch if zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (037D 037D B NZ
      (desc "IP-relative branch if not zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0800 080F B LU
      (desc "IP-relative branch if less (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0810 081F B NLU
      (desc "IP-relative branch if not less (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0820 082F B GU
      (desc "IP-relative branch if greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0830 083F B NGU
      (desc "IP-relative branch if not greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0840 084F B N
      (desc "IP-relative branch if negative")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0850 085F B NN
      (desc "IP-relative branch if not negative")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0860 086F B C
      (desc "IP-relative branch if carry")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0870 087F B NC
      (desc "IP-relative branch if not carry")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0880 0880 B LU
      (desc "IP-relative branch if less (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0881 0881 B LU
      (desc "IP-relative branch if less (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0882 0882 B NLU
      (desc "IP-relative branch if not less (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0883 0883 B NLU
      (desc "IP-relative branch if not less (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0884 0884 B GU
      (desc "IP-relative branch if greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0885 0885 B GU
      (desc "IP-relative branch if greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0886 0886 B NGU
      (desc "IP-relative branch if not greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0887 0887 B NGU
      (desc "IP-relative branch if not greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0888 0888 B N
      (desc "IP-relative branch if negative")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0889 0889 B N
      (desc "IP-relative branch if negative")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (088A 088A B NN
      (desc "IP-relative branch if not negative")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (088B 088B B NN
      (desc "IP-relative branch if not negative")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (088C 088C B C
      (desc "IP-relative branch if carry")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (088D 088D B C
      (desc "IP-relative branch if carry")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (088E 088E B NC
      (desc "IP-relative branch if not carry")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (088F 088F B NC
      (desc "IP-relative branch if not carry")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0890 0890 B LU
      (desc "IP-relative branch if less (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0891 0891 B NLU
      (desc "IP-relative branch if not less (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0892 0892 B GU
      (desc "IP-relative branch if greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0893 0893 B NGU
      (desc "IP-relative branch if not greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0894 0894 B N
      (desc "IP-relative branch if negative")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0895 0895 B NN
      (desc "IP-relative branch if not negative")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0896 0896 B C
      (desc "IP-relative branch if carry")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0897 0897 B NC
      (desc "IP-relative branch if not carry")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0898 0898 B LU_GU
      (desc "IP-relative ternary branch if less (unsigned) or greater (unsigned)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (0899 0899 B LU_Z
      (desc "IP-relative ternary branch if less (unsigned) or zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (089A 089A B GU_Z
      (desc "IP-relative ternary branch if greater (unsigned) or zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (0900 090F SHRC
      (desc "Shift right 16b register 1 bit, shift Carry into MSB")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (0910 091F SHLC
      (desc "Shift left 16b register 1 bit, shift Carry into LSB")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (0C00 0C0F B LS
      (desc "IP-relative branch if less (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0C10 0C1F B NLS
      (desc "IP-relative branch if not less (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0C20 0C2F B GS
      (desc "IP-relative branch if greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0C30 0C3F B NGS
      (desc "IP-relative branch if not greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0C40 0C4F B P
      (desc "IP-relative branch if positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0C50 0C5F B NP
      (desc "IP-relative branch if not positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src OA) (range 4 14) (range -6 -2))
   )
   (0C60 0C6F MCR
      (desc "Copy a block of memory.  BP points to the first byte of the source block and RP points to the first byte of the destination block.  If blocks overlap, BP must be larger than RP.  If a block crosses a page boundary, it must be word aligned.  Takes approximately block_bytes + 2 cycles to complete.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
      (param -> (address data) (base sr rp))
   )
   (0C70 0C7F MCRB
      (desc "Copy a block of memory with byte transfers only.  BP points to the first byte of the source block and RP points to the first byte of the destination block.  If blocks overlap, BP must be larger than RP.  Takes approximately block_bytes * 2 + 2 cycles to complete, but is not susceptible to any of the alignment constraints of MCR.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
      (param -> (address data) (base sr rp))
   )
   (0C80 0C80 B LS
      (desc "IP-relative branch if less (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0C81 0C81 B LS
      (desc "IP-relative branch if less (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0C82 0C82 B NLS
      (desc "IP-relative branch if not less (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0C83 0C83 B NLS
      (desc "IP-relative branch if not less (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0C84 0C84 B GS
      (desc "IP-relative branch if greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0C85 0C85 B GS
      (desc "IP-relative branch if greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0C86 0C86 B NGS
      (desc "IP-relative branch if not greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0C87 0C87 B NGS
      (desc "IP-relative branch if not greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0C88 0C88 B P
      (desc "IP-relative branch if positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0C89 0C89 B P
      (desc "IP-relative branch if positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0C8A 0C8A B NP
      (desc "IP-relative branch if not positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (range 15 270))
   )
   (0C8B 0C8B B NP
      (desc "IP-relative branch if not positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_8) (rev) (range -262 -7))
   )
   (0C90 0C90 B LS
      (desc "IP-relative branch if less (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0C91 0C91 B NLS
      (desc "IP-relative branch if not less (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0C92 0C92 B GS
      (desc "IP-relative branch if greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0C93 0C93 B NGS
      (desc "IP-relative branch if not greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0C94 0C94 B P
      (desc "IP-relative branch if positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0C95 0C95 B NP
      (desc "IP-relative branch if not positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (0C96 0C96 B N_Z
      (desc "IP-relative ternary branch if negative or zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (0C97 0C97 B P_Z
      (desc "IP-relative ternary branch if positive or zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (0C98 0C98 B LS_GS
      (desc "IP-relative ternary branch if less (signed) or greater (signed)")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (0C99 0C99 B LS_Z
      (desc "IP-relative ternary branch if less (signed) or zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (0C9A 0C9A B GS_Z
      (desc "IP-relative ternary branch if greater (signed) or zero")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (0C9B 0C9B B N_P
      (desc "IP-relative ternary branch if negative or positive")
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param (address insn) (base sr ip) (offset constant) (offset-src IP_plus_4_16) (range 0 32767) (range -32768 -1))
   )
   (0CA0 0CAF MCF
      (desc "Copy a block of memory.  BP points to the byte following the source block and RP points to the byte following the destination block.  If blocks overlap, BP must be smaller than RP.  If a block crosses a page boundary, it must be word aligned.  Takes approximately block_bytes + 2 cycles to complete.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
      (param -> (address data) (base sr rp))
   )
   (0CB0 0CBF MCFB
      (desc "Copy a block of memory with byte transfers only.  BP points to the byte following the source block and RP points to the byte following the destination block.  If blocks overlap, BP must be smaller than RP.  Takes approximately block_bytes * 2 + 2 cycles to complete, but is not susceptible to any of the alignment constraints of MCF.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
      (param -> (address data) (base sr rp))
   )
   (0CC0 0CCF SI
      (desc "Stream from a fixed address to a block of memory.  BP points to the fixed address and RP points to the first byte of the destination block.  If the block crosses a page boundary, it must be word aligned.  Takes approximately block_bytes + 2 cycles to complete.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
      (param -> (address data) (base sr rp))
   )
   (0CD0 0CDF SIB
      (desc "Stream from a fixed address to a block of memory, with byte transfers only.  BP points to the fixed address and RP points to the first byte of the destination block.  Takes approximately block_bytes * 2 + 2 cycles to complete, but is not susceptible to any of the alignment constraints of SI.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
      (param -> (address data) (base sr rp))
   )
   (0CE0 0CEF SO
      (desc "Stream a block of memory to a fixed address.  BP points to the first byte of the source block and RP points to the fixed destination address.  If the block crosses a page boundary, it must be word aligned.  Takes approximately block_bytes + 2 cycles to complete.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
      (param -> (address data) (base sr rp))
   )
   (0CF0 0CFF SOB
      (desc "Stream a block of memory to a fixed address, with byte transfers only.  BP points to the first byte of the source block and RP points to the fixed destination address.  Takes approximately block_bytes * 2 + 2 cycles to complete, but is not susceptible to any of the alignment constraints of SO.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
      (param -> (address data) (base sr rp))
   )
   (0D00 0D0F BLD
      (desc "Load 8 bytes from FLASH or PSRAM to RAM.  Xa points to the first chunk of RAM to write to (will be incremented by 8).  Block source must be configured beforehand by writing to the configuration port.  Only one pipe may perform a block operation at a time.")
      (param -> (address data) (base reg32) (base-src OA))
   )
   (0D10 0D1F BLD
      (desc "Load from FLASH or PSRAM to RAM.  Xa indicates the number of bytes remaining to be copied (will be decremented by 8 each cycle; operation ends when zero or negative).  BP points to just before the first byte of RAM to write to (will be incremented by 8 before each cycle).  Block source must be configured beforehand by writing to the configuration port.  Only one pipe may perform a block operation at a time.")
      (param (base reg32 (signed)) (base-src OA))
      (param -> (address data) (base sr bp))
   )
   (0D20 0D2F BST
      (desc "Store 8 bytes from RAM into FLASH or PSRAM.  Xa points to the first chunk of RAM to read (will be incremented by 8).  Block destination must be configured beforehand by writing to the configuration port.  Only one pipe may perform a block operation at a time.")
      (param (address data) (base reg32) (base-src OA))
   )
   (0D30 0D3F BST
      (desc "Store from RAM into FLASH or PSRAM.  Xa indicates the number of bytes remaining to be copied (will be decremented by 8 each cycle; operation ends when zero or negative).  BP points to just before the first byte of RAM to read (will be incremented by 8 before each cycle).  Block destination must be configured beforehand by writing to the configuration port.  Only one pipe may perform a block operation at a time.")
      (param (base reg32 (signed)) (base-src OA))
      (param (address data) (base sr bp))
   )
   (1000 10FF ST
      (desc "Store byte using pointer to stack memory")
      (param (base reg8) (base-src OB))
      (param -> (address stack) (base reg32) (base-src OA))
   )
   (1100 11FF ST
      (desc "Store 16b register using pointer to stack memory")
      (param (base reg16) (base-src OB))
      (param -> (address stack) (base reg32) (base-src OA))
   )
   (1200 12FF ST
      (desc "Store 32b register using pointer to stack memory")
      (param (base reg32) (base-src OB))
      (param -> (address stack) (base reg32) (base-src OA))
   )
   (1300 13FF ST
      (desc "Store byte using pointer to data memory")
      (param (base reg8) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (1400 14FF ST
      (desc "Store 16b register using pointer to data memory")
      (param (base reg16) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (1500 15FF ST
      (desc "Store 32b register using pointer to data memory")
      (param (base reg32) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (1600 16FF ST
      (desc "Store byte using pointer to data memory with 16b register offset")
      (param (base reg8 (index 0 0)))
      (param -> (address data) (base reg32) (offset reg16 (unsigned)) (base-src OA) (offset-src OB))
   )
   (1700 17FF ST
      (desc "Store 16b register using pointer to data memory with 16b register offset")
      (param (base reg16 (index 0 0)))
      (param -> (address data) (base reg32) (offset reg16 (unsigned)) (base-src OA) (offset-src OB))
   )
   (1800 18FF ST
      (desc "Store 32b register using pointer to data memory with 16b register offset")
      (param (base reg32 (index 0 0)))
      (param -> (address data) (base reg32) (offset reg16 (unsigned)) (base-src OA) (offset-src OB))
   )
   (1900 19FF ST
      (desc "Store byte using pointer to data memory with immediate offset")
      (param (base reg8 (index 0 0)))
      (param -> (address data) (base reg32) (offset constant) (base-src OA) (offset-src OB) (range 0 15))
   )
   (1A00 1AFF ST
      (desc "Store 16b register using pointer to data memory with immediate offset (align 2)")
      (param (base reg16 (index 0 0)))
      (param -> (address data) (base reg32) (offset constant) (base-src OA) (offset-src OB) (range 0 30) (align 2))
   )
   (1B00 1BFF ST
      (desc "Store 32b register using pointer to data memory with immediate offset (align 4)")
      (param (base reg32 (index 0 0)))
      (param -> (address data) (base reg32) (offset constant) (base-src OA) (offset-src OB) (range 0 60) (align 4))
   )
   (1C00 1CFF ST
      (desc "Store byte to stack with immediate offset")
      (param (base reg8) (base-src OA))
      (param -> (address stack) (base sr sp) (offset constant) (offset-src OB) (range 0 15))
   )
   (1D00 1DFF ST
      (desc "Store 16b register to stack with immediate offset (align 2)")
      (param (base reg16) (base-src OA))
      (param -> (address stack) (base sr sp) (offset constant) (offset-src OB) (range 0 30) (align 2))
   )
   (1E00 1EFF ST
      (desc "Store 32b register to stack with immediate offset (align 4)")
      (param (base reg32) (base-src OA))
      (param -> (address stack) (base sr sp) (offset constant) (offset-src OB) (range 0 60) (align 4))
   )
   (1F00 1F0F SAT W
      (desc "Set address translation entry corresponding to X0 with data in Xa; discard secondary entry if necessary")
      (param (base reg32) (base-src OA))
      (param -> (address data) (base reg32 (index 0 0)))
   )
   (1F10 1F1F SAT R
      (desc "Set address translation entry corresponding to X0 with data in Xa; discard secondary entry if necessary")
      (param (base reg32) (base-src OA))
      (param -> (address data) (base reg32 (index 0 0)))
   )
   (1F20 1F2F SAT S
      (desc "Set address translation entry corresponding to X0 with data in Xa; discard secondary entry if necessary")
      (param (base reg32) (base-src OA))
      (param -> (address stack) (base reg32 (index 0 0)))
   )
   (1F30 1F3F SAT I
      (desc "Set address translation entry corresponding to X0 with data in Xa; discard secondary entry if necessary")
      (param (base reg32) (base-src OA))
      (param -> (address insn) (base reg32 (index 0 0)))
   )
   (1F40 1F4F RAT W
      (desc "Remove address translation entry or entries corresponding to X0 with tag mask Ra")
      (param (base reg16) (base-src OA))
   )
   (1F50 1F5F RAT R
      (desc "Remove address translation entry or entries corresponding to X0 with tag mask Ra")
      (param (base reg16) (base-src OA))
   )
   (1F60 1F6F RAT S
      (desc "Remove address translation entry or entries corresponding to X0 with tag mask Ra")
      (param (base reg16) (base-src OA))
   )
   (1F70 1F7F RAT I
      (desc "Remove address translation entry or entries corresponding to X0 with tag mask Ra")
      (param (base reg16) (base-src OA))
   )
   (2000 20FF ST
      (desc "Store byte to stack with 16b register offset")
      (param (base reg8) (base-src OA))
      (param -> (address stack) (base sr sp) (offset reg16 (signed)) (offset-src OB))
   )
   (2100 21FF ST
      (desc "Store 16b register to stack with 16b register offset")
      (param (base reg16) (base-src OA))
      (param -> (address stack) (base sr sp) (offset reg16 (signed)) (offset-src OB))
   )
   (2200 22FF ST
      (desc "Store 32b register to stack with 16b register offset")
      (param (base reg32) (base-src OA))
      (param -> (address stack) (base sr sp) (offset reg16 (signed)) (offset-src OB))
   )
   (2300 23FF STI
      (desc "Store byte using pointer to data memory; postincrement")
      (param (base reg8) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (2400 24FF STI
      (desc "Store 16b register using pointer to data memory; postincrement")
      (param (base reg16) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (2500 25FF STI
      (desc "Store 32b register using pointer to data memory; postincrement")
      (param (base reg32) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (2600 26FF IST
      (desc "Load signed byte using pointer to data memory; preincrement")
      (param (base reg8) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (2700 27FF IST
      (desc "Load 16b register using pointer to data memory; preincrement")
      (param (base reg16) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (2800 28FF IST
      (desc "Load 32b register using pointer to data memory; preincrement")
      (param (base reg32) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3000 30FF ALD
      (desc "Atomic load 16b register using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OB))
   )
   (3100 31FF ALD
      (desc "Atomic load 32b register using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (3200 32FF AST
      (desc "Atomic store 16b register using pointer to data memory")
      (param (base reg16) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3300 33FF AST
      (desc "Atomic store 32b register using pointer to data memory")
      (param (base reg32) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3400 34FF ASTZ
      (desc "Atomic store 16b register using pointer to data memory, if previous stored value is 0")
      (param (base reg16) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3500 35FF ASTZ
      (desc "Atomic store 32b register using pointer to data memory, if previous stored value is 0")
      (param (base reg32) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3600 36FF AADD
      (desc "16b Atomic add using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16 (index 0 0)))
      (param (base reg16) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3700 37FF AADD
      (desc "32b Atomic add using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32 (index 0 0)))
      (param (base reg32) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3800 380F AINC
      (desc "16b Atomic increment using pointer to data memory, overwriting pointer with new value")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (3900 39FF AINC
      (desc "32b Atomic increment using pointer to data memory, overwriting pointer with new value")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OA))
   )
   (3A00 3A0F ADECNZ
      (desc "16b Atomic decrement using pointer to data memory, if stored value is not zero.  Overwrites address with final value.")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (3B00 3B0F ADECNZ
      (desc "32b Atomic decrement using pointer to data memory, if stored value is not zero.  Overwrites address with final value.")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OA))
   )
   (3C00 3C0F AX
      (desc "16b Atomic exchange using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src IP_plus_2_OB))
      (param (base reg16) (base-src IP_plus_2_OA))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3C10 3C1F AX
      (desc "32b Atomic exchange using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src IP_plus_2_OB))
      (param (base reg32) (base-src IP_plus_2_OA))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3C20 3C2F AXE
      (desc "16b Atomic exchange using pointer to data memory, if stored value equals probe value")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16 (index 0 0)))
      (param (base reg16) (base-src IP_plus_2_OB))
      (param (base reg16) (base-src IP_plus_2_OA))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (3C30 3C3F AXE
      (desc "32b Atomic exchange using pointer to data memory, if stored value equals probe value")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32 (index 0 0)))
      (param (base reg32) (base-src IP_plus_2_OB))
      (param (base reg32) (base-src IP_plus_2_OA))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (4800 48FF C
      (desc "Copy 16b register to another 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OB))
   )
   (4900 49FF C
      (desc "Copy unsigned value from 16b register to 32b register")
      (param (base reg16 (unsigned)) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (4A00 4AFF C
      (desc "Copy signed value from 16b register to 32b register")
      (param (base reg16 (signed)) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (4B00 4BFF C
      (desc "Copy 32b register to another 32b register")
      (param (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (4C00 4CFF C
      (desc "Copy IP-relative address to 32b register")
      (param (base sr ip) (offset reg16 (signed)) (offset-src OB))
      (param -> (base reg32) (base-src OA))
   )
   (4D00 4DFF C
      (desc "Copy SP-relative address to 32b register")
      (param (base sr sp) (offset reg16 (signed)) (offset-src OB))
      (param -> (base reg32) (base-src OA))
   )
   (4E00 4EFF C
      (desc "Copy IP-relative (immediate offset) address to 32b register")
      (param (base sr ip) (offset constant) (offset-src OB) (range 0 7) (range -8 -1))
      (param -> (base reg32) (base-src OA))
   )
   (4F00 4FFF C
      (desc "Copy SP-relative (immediate offset) address to 32b register")
      (param (base sr sp) (offset constant) (offset-src OB) (range 0 7) (range -8 -1))
      (param -> (base reg32) (base-src OA))
   )
   (5800 580F C
      (desc "Copy IP-relative (immediate offset) address to 32b register")
      (param (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range 0 65535))
      (param -> (base reg32) (base-src OA))
   )
   (5810 581F C
      (desc "Copy IP-relative (immediate offset) address to 32b register")
      (param (base sr ip) (offset constant) (offset-src IP_plus_2_16) (range -65536 -1))
      (param -> (base reg32) (base-src OA))
   )
   (5820 582F C
      (desc "Copy SP-relative (immediate offset) address to 32b register")
      (param (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range 0 65535))
      (param -> (base reg32) (base-src OA))
   )
   (5830 583F C
      (desc "Copy SP-relative (immediate offset) address to 32b register")
      (param (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range -65536 -1))
      (param -> (base reg32) (base-src OA))
   )
   (5840 584F C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 16 16))
      (param -> (base reg16) (base-src OA))
   )
   (5850 585F C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 32 32))
      (param -> (base reg16) (base-src OA))
   )
   (5860 586F C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 64 64))
      (param -> (base reg16) (base-src OA))
   )
   (5870 587F C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 128 128))
      (param -> (base reg16) (base-src OA))
   )
   (5880 588F C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 256 256))
      (param -> (base reg16) (base-src OA))
   )
   (5890 589F C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 512 512))
      (param -> (base reg16) (base-src OA))
   )
   (58A0 58AF C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 1024 1024))
      (param -> (base reg16) (base-src OA))
   )
   (58B0 58BF C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 2048 2048))
      (param -> (base reg16) (base-src OA))
   )
   (58C0 58CF C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 4096 4096))
      (param -> (base reg16) (base-src OA))
   )
   (58D0 58DF C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 8192 8192))
      (param -> (base reg16) (base-src OA))
   )
   (58E0 58EF C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 16384 16384))
      (param -> (base reg16) (base-src OA))
   )
   (58F0 58FF C
      (desc "Copy immediate to 16b register")
      (param (base constant) (range 32768 32768))
      (param -> (base reg16) (base-src OA))
   )
   (5900 59FF DUP
      (desc "Concatenate 16b register with itself, storing result in 32b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (5A00 5AFF UNFRAME
      (desc "Add immediate to stack pointer")
      (param (base constant) (base-src OB_OA) (range 0 255))
   )
   (5B00 5BFF FRAME
      (desc "Subtract immediate from stack pointer")
      (param (base constant) (base-src OB_OA) (range 0 255))
   )
   (5C00 5CFF C
      (desc "Copy immediate to 16b register")
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg16) (base-src OA))
   )
   (5D00 5DFF C
      (desc "Copy immediate to 16b register")
      (param (base constant) (base-src OB) (range -16 -1))
      (param -> (base reg16) (base-src OA))
   )
   (5E00 5EFF C
      (desc "Copy immediate to 32b register")
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg32) (base-src OA))
   )
   (5F00 5FFF C
      (desc "Copy immediate to 32b register")
      (param (base constant) (base-src OB) (range -16 -1))
      (param -> (base reg32) (base-src OA))
   )
   (7000 70FF ADD
      (desc "Add signed 8b immediate to 32b regiser")
      (param (base reg32) (base-src OA))
      (param (base constant) (base-src IP_plus_2_8) (range 0 127) (range -128 -1))
      (param -> (base reg32) (base-src OB))
   )
   (7100 71FF ADD
      (desc "Add signed 17b immediate to 32b register")
      (param (base reg32) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535))
      (param -> (base reg32) (base-src OB))
   )
   (7200 72FF ADD
      (desc "Add signed 17b immediate to 32b register")
      (param (base reg32) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range -65536 -1))
      (param -> (base reg32) (base-src OB))
   )
   (7300 73FF ADD
      (desc "Add unsigned 16b register to 32b register")
      (param (base reg32) (base-src OA))
      (param (base reg16 (unsigned)) (base-src OB))
      (param -> (base reg32) (base-src OA))
   )
   (7400 74FF ADD
      (desc "Add signed 16b register to 32b register")
      (param (base reg32) (base-src OA))
      (param (base reg16 (signed)) (base-src OB))
      (param -> (base reg32) (base-src OA))
   )
   (7500 75FF ADD
      (desc "Add signed 8b immediate to 16b regiser")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_8) (range 0 127) (range -128 -1))
      (param -> (base reg16) (base-src OB))
   )
   (7600 76FF ADDC
      (desc "Add signed 8b immediate to 16b regiser, with carry")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_8) (range 0 127) (range -128 -1))
      (param -> (base reg16) (base-src OB))
   )
   (7700 77FF ADD
      (desc "Add signed or unsigned 16b immediate to 16b regiser")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param -> (base reg16) (base-src OB))
   )
   (7800 78FF ADDC
      (desc "Add signed or unsigned 16b immediate to 16b regiser, with carry")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param -> (base reg16) (base-src OB))
   )
   (7900 79FF ADD
      (desc "Add 16b register to another 16b regiser")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (7A00 7AFF ADDC
      (desc "Add 16b register to another 16b regiser, with carry")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (8000 80FF CMP
      (desc "Compare register to another register")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
   )
   (8100 81FF CMPB
      (desc "Compare register to another register, with borrow")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
   )
   (8300 83FF SUB
      (desc "Subtract unsigned 16b register from 32b register")
      (param (base reg32) (base-src OA))
      (param (base reg16 (unsigned)) (base-src OB))
      (param -> (base reg32) (base-src OA))
   )
   (8400 84FF SUB
      (desc "Subtract signed 16b register from 32b register")
      (param (base reg32) (base-src OA))
      (param (base reg16 (signed)) (base-src OB))
      (param -> (base reg32) (base-src OA))
   )
   (8500 85FF SUB
      (desc "Subtract register from immediate and store result in another register")
      (param (base constant) (base-src IP_plus_2_8) (range 0 127) (range -128 -1))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (8600 86FF SUBB
      (desc "Subtract register from immediate and store result in another register, with borrow")
      (param (base constant) (base-src IP_plus_2_8) (range 0 127) (range -128 -1))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (8700 87FF SUB
      (desc "Subtract register from immediate and store result in another register")
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (8800 88FF SUBB
      (desc "Subtract register from immediate and store result in another register, with borrow")
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (8900 89FF SUB
      (desc "Subtract register from another register")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (8A00 8AFF SUBB
      (desc "Subtract register from another register, with borrow")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (8B00 8BFF CMP
      (desc "Compare 32b register to 16b register, unsigned")
      (param (base reg32) (base-src OA))
      (param (base reg16 (unsigned)) (base-src OB))
   )
   (8C00 8CFF CMP
      (desc "Compare 32b register to 16b register, signed")
      (param (base reg32) (base-src OA))
      (param (base reg16 (signed)) (base-src OB))
   )
   (9100 91FF TESTB
      (desc "Set Z and N flags according to single bit from 16b register")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
   )
   (9200 92FF TESTBZ
      (desc "Set Z and N flags according to single bit from 16b register, without setting the Z flag if it is already clear")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
   )
   (9300 930F INC
      (desc "Increment 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (9310 931F INCC
      (desc "Increment 16b register, with carry")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (9320 932F INC
      (desc "Increment 32b register")
      (param (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OA))
   )
   (9330 933F INCC
      (desc "Increment 32b register, with carry")
      (param (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OA))
   )
   (9340 934F DEC
      (desc "Decrement 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (9350 935F DECB
      (desc "Decrement 16b register, with borrow")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (9360 936F DEC
      (desc "Decrement 32b register")
      (param (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OA))
   )
   (9370 937F DECB
      (desc "Decrement 32b register, with borrow")
      (param (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OA))
   )
   (9380 938F C
      (desc "Copy stack pointer to 32b register")
      (param (base sr sp))
      (param -> (base reg32) (base-src OA))
   )
   (93A0 93AF NOT
      (desc "Bitwise complement of 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (93B0 93BF C
      (desc "Copy kernel context pointer to 32b register")
      (param (base sr kxp))
      (param -> (base reg32) (base-src OA))
   )
   (93C0 93CF C
      (desc "Copy 32b register to kernel context pointer")
      (param (base reg32) (base-src OA))
      (param -> (base sr kxp))
   )
   (93D0 93DF C
      (desc "Copy user context pointer to 32b register")
      (param (base sr uxp))
      (param -> (base reg32) (base-src OA))
   )
   (93E0 93EF C
      (desc "Copy 32b register to user context pointer")
      (param (base reg32) (base-src OA))
      (param -> (base sr uxp))
   )
   (9400 94FF NEG
      (desc "Negate 16b register")
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (9500 95FF NEGB
      (desc "Negate 16b register, with borrow")
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (9800 98FF LDI
      (desc "Load unsigned byte using pointer to data memory; postincrement")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg8 (unsigned)) (base-src OB))
   )
   (9900 99FF LDI
      (desc "Load signed byte using pointer to data memory; postincrement")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg8 (signed)) (base-src OB))
   )
   (9A00 9AFF LDI
      (desc "Load 16b register using pointer to data memory; postincrement")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OB))
   )
   (9B00 9BFF LDI
      (desc "Load 32b register using pointer to data memory; postincrement")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (9C00 9CFF ILD
      (desc "Load unsigned byte using pointer to data memory; preincrement")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg8 (unsigned)) (base-src OB))
   )
   (9D00 9DFF ILD
      (desc "Load signed byte using pointer to data memory; preincrement")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg8 (signed)) (base-src OB))
   )
   (9E00 9EFF ILD
      (desc "Load 16b register using pointer to data memory; preincrement")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OB))
   )
   (9F00 9FFF ILD
      (desc "Load 32b register using pointer to data memory; preincrement")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (A000 A0FF CLRB
      (desc "Clear single bit in 16b register")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg16) (base-src OA))
   )
   (A100 A1FF SETB
      (desc "Set single bit in 16b register")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg16) (base-src OA))
   )
   (A200 A2FF TGLB
      (desc "Toggle single bit in 16b register")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg16) (base-src OA))
   )
   (B000 B0FF XOR
      (desc "Bitwise XOR of two 16b registers")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (B100 B1FF XNOR
      (desc "Bitwise XNOR of two 16b registers")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (B200 B2FF OR
      (desc "Bitwise OR of two 16b registers")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (B300 B3FF NOR
      (desc "Bitwise NOR of two 16b registers")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (B400 B4FF AND
      (desc "Bitwise AND of two 16b registers")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (B500 B5FF NAND
      (desc "Bitwise NAND of two 16b registers")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (B600 B6FF ANDNOT
      (desc "Bitwise AND of two 16b registers (second register is complemented)")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (B800 B8FF LD
      (desc "Load 16b register from user context, with immediate offset (align 2)")
      (param (address data) (base sr uxp) (offset constant) (offset-src OB) (range 0 30) (align 2))
      (param -> (base reg16) (base-src OA))
   )
   (B900 B9FF LD
      (desc "Load 32b register from user context, with immediate offset (align 4)")
      (param (address data) (base sr uxp) (offset constant) (offset-src OB) (range 0 60) (align 4))
      (param -> (base reg32) (base-src OA))
   )
   (BA00 BAFF LD
      (desc "Load 16b register from user context, with immediate offset (align 2)")
      (param (address data) (base sr kxp) (offset constant) (offset-src OB) (range 0 30) (align 2))
      (param -> (base reg16) (base-src OA))
   )
   (BB00 BBFF LD
      (desc "Load 32b register from user context, with immediate offset (align 4)")
      (param (address data) (base sr kxp) (offset constant) (offset-src OB) (range 0 60) (align 4))
      (param -> (base reg32) (base-src OA))
   )
   (BC00 BCFF LD
      (desc "Load unsigned byte from stack with 16b register offset")
      (param (address stack) (base sr sp) (offset reg16 (signed)) (offset-src OB))
      (param -> (base reg8 (unsigned)) (base-src OA))
   )
   (BD00 BDFF LD
      (desc "Load signed byte from stack with 16b register offset")
      (param (address stack) (base sr sp) (offset reg16 (signed)) (offset-src OB))
      (param -> (base reg8 (signed)) (base-src OA))
   )
   (BE00 BEFF LD
      (desc "Load 16b register from stack with 16b register offset")
      (param (address stack) (base sr sp) (offset reg16 (signed)) (offset-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (BF00 BFFF LD
      (desc "Load 32b register from stack with 16b register offset")
      (param (address stack) (base sr sp) (offset reg16 (signed)) (offset-src OB))
      (param -> (base reg32) (base-src OA))
   )
   (C000 C00F LD
      (desc "Load unsigned byte from stack with immediate offset")
      (param (address stack) (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param -> (base reg8 (unsigned)) (base-src OA))
   )
   (C010 C01F LD
      (desc "Load signed byte from stack with immediate offset")
      (param (address stack) (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param -> (base reg8 (signed)) (base-src OA))
   )
   (C020 C02F LD
      (desc "Load 16b register from stack with immediate offset")
      (param (address stack) (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param -> (base reg16) (base-src OA))
   )
   (C030 C03F LD
      (desc "Load 32b register from stack with immediate offset")
      (param (address stack) (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
      (param -> (base reg32) (base-src OA))
   )
   (C040 C04F ST
      (desc "Store byte to stack with immediate offset")
      (param (base reg8) (base-src OA))
      (param -> (address stack) (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (C050 C05F ST
      (desc "Store 16b register to stack with immediate offset")
      (param (base reg16) (base-src OA))
      (param -> (address stack) (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (C060 C06F ST
      (desc "Store 32b register to stack with immediate offset")
      (param (base reg32) (base-src OA))
      (param -> (address stack) (base sr sp) (offset constant) (offset-src IP_plus_2_16) (range 0 32767) (range -32768 -1))
   )
   (C100 C1FF XOR
      (desc "Bitwise XOR of 16b register and immediate")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param -> (base reg16) (base-src OB))
   )
   (C200 C2FF OR
      (desc "Bitwise OR of 16b register and immediate")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param -> (base reg16) (base-src OB))
   )
   (C300 C3FF NOR
      (desc "Bitwise NOR of 16b register and immediate")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param -> (base reg16) (base-src OB))
   )
   (C400 C4FF AND
      (desc "Bitwise AND of 16b register and immediate")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param -> (base reg16) (base-src OB))
   )
   (C500 C5FF NAND
      (desc "Bitwise NAND of 16b register and immediate")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param -> (base reg16) (base-src OB))
   )
   (C600 C6FF TEST
      (desc "Set Z and N flags based on bitwise AND of two 16b registers")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
   )
   (C700 C7FF TESTZ
      (desc "Set Z and N flags based on bitwise AND of two 16b registers (don't set Z if already clear)")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
   )
   (C800 C8FF LD
      (desc "Load unsigned byte using pointer to instruction memory")
      (param (address insn) (base reg32) (base-src OA))
      (param -> (base reg8 (unsigned)) (base-src OB))
   )
   (C900 C9FF LD
      (desc "Load signed byte using pointer to instruction memory")
      (param (address insn) (base reg32) (base-src OA))
      (param -> (base reg8 (signed)) (base-src OB))
   )
   (CA00 CAFF LD
      (desc "Load 16b register using pointer to instruction memory")
      (param (address insn) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OB))
   )
   (CB00 CBFF LD
      (desc "Load 32b register using pointer to instruction memory")
      (param (address insn) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (CC00 CCFF LD
      (desc "Load unsigned byte from stack with immediate offset")
      (param (address stack) (base sr sp) (offset constant) (offset-src OB) (range 0 15))
      (param -> (base reg8 (unsigned)) (base-src OA))
   )
   (CD00 CDFF LD
      (desc "Load signed byte from stack with immediate offset")
      (param (address stack) (base sr sp) (offset constant) (offset-src OB) (range 0 15))
      (param -> (base reg8 (signed)) (base-src OA))
   )
   (CE00 CEFF LD
      (desc "Load 16b register from stack with immediate offset (align 2)")
      (param (address stack) (base sr sp) (offset constant) (offset-src OB) (range 0 30) (align 2))
      (param -> (base reg16) (base-src OA))
   )
   (CF00 CFFF LD
      (desc "Load 32b register from stack with immediate offset (align 4)")
      (param (address stack) (base sr sp) (offset constant) (offset-src OB) (range 0 60) (align 4))
      (param -> (base reg32) (base-src OA))
   )
   (D000 D0FF SHR
      (desc "Right shift 32b register 0-31 bits, zero extending")
      (param (base reg32 (unsigned)) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg32 (unsigned)) (base-src OA))
   )
   (D100 D1FF SHL
      (desc "Left shift 32b register 0-31 bits")
      (param (base reg32) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg32) (base-src OA))
   )
   (D200 D2FF SHR
      (desc "Shift right 16b register 0-15 bits, unsigned")
      (param (base reg16 (unsigned)) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16 (unsigned)) (base-src OA))
   )
   (D300 D3FF SHR
      (desc "Shift right 16b register 0-15 bits, signed")
      (param (base reg16 (signed)) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16 (signed)) (base-src OA))
   )
   (D400 D4FF SHL
      (desc "Shift left 16b register 0-15 bits")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (D500 D5FF SHR
      (desc "Shift right 16b register 0-15 bits, unsigned")
      (param (base reg16 (unsigned)) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg16 (unsigned)) (base-src OA))
   )
   (D600 D6FF SHR
      (desc "Shift right 16b register 0-15 bits, signed")
      (param (base reg16 (signed)) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg16 (signed)) (base-src OA))
   )
   (D700 D7FF SHL
      (desc "Shift left 16b register 0-15 bits")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg16) (base-src OA))
   )
   (D800 D8FF LD
      (desc "Load unsigned byte using pointer to stack memory")
      (param (address stack) (base reg32) (base-src OA))
      (param -> (base reg8 (unsigned)) (base-src OB))
   )
   (D900 D9FF LD
      (desc "Load signed byte using pointer to stack memory")
      (param (address stack) (base reg32) (base-src OA))
      (param -> (base reg8 (signed)) (base-src OB))
   )
   (DA00 DAFF LD
      (desc "Load 16b register using pointer to stack memory")
      (param (address stack) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OB))
   )
   (DB00 DBFF LD
      (desc "Load 32b register using pointer to stack memory")
      (param (address stack) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (DC00 DCFF LD
      (desc "Load unsigned byte using pointer to data memory with immediate offset")
      (param (address data) (base reg32) (offset constant) (base-src OA) (offset-src OB) (range 0 15))
      (param -> (base reg8 (index 0 0) (unsigned)))
   )
   (DD00 DDFF LD
      (desc "Load signed byte using pointer to data memory with immediate offset")
      (param (address data) (base reg32) (offset constant) (base-src OA) (offset-src OB) (range 0 15))
      (param -> (base reg8 (index 0 0) (signed)))
   )
   (DE00 DEFF LD
      (desc "Load 16b register using pointer to data memory with immediate offset (align 2)")
      (param (address data) (base reg32) (offset constant) (base-src OA) (offset-src OB) (range 0 30) (align 2))
      (param -> (base reg16 (index 0 0)))
   )
   (DF00 DFFF LD
      (desc "Load 32b register using pointer to data memory with immediate offset (align 4)")
      (param (address data) (base reg32) (offset constant) (base-src OA) (offset-src OB) (range 0 60) (align 4))
      (param -> (base reg32 (index 0 0)))
   )
   (E000 E0FF SHR
      (desc "Right shift 32b register 0-31 bits, zero extending")
      (param (base reg32 (unsigned)) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg32 (unsigned)) (base-src OA))
   )
   (E100 E1FF SHR
      (desc "Right shift 32b register 0-31 bits, zero extending")
      (param (base reg32 (unsigned)) (base-src OA))
      (param (base constant) (base-src OB) (range 16 31))
      (param -> (base reg32 (unsigned)) (base-src OA))
   )
   (E200 E2FF SHL
      (desc "Left shift 32b register 0-31 bits")
      (param (base reg32) (base-src OA))
      (param (base constant) (base-src OB) (range 0 15))
      (param -> (base reg32) (base-src OA))
   )
   (E300 E3FF SHL
      (desc "Left shift 32b register 0-31 bits")
      (param (base reg32) (base-src OA))
      (param (base constant) (base-src OB) (range 16 31))
      (param -> (base reg32) (base-src OA))
   )
   (E400 E40F CB
      (desc "Count set bits in 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (E410 E41F CZ
      (desc "Count zero bits in 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (E420 E42F CLB
      (desc "Count leading (most significant) set bits in 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (E430 E43F CLZ
      (desc "Count leading (most significant) zero bits in 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (E440 E44F CTB
      (desc "Count trailing (least significant) set bits in 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (E450 E45F CTZ
      (desc "Count trailing (least significant) zero bits in 16b register")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src OA))
   )
   (E460 E46F C
      (desc "Copy address space number to 32b register")
      (param (base sr asn))
      (param -> (base reg32) (base-src OA))
   )
   (E470 E47F C
      (desc "Copy 32b register to address space number")
      (param (base reg32) (base-src OA))
      (param -> (base sr asn))
   )
   (E480 E48F POP
      (desc "Pop unsigned byte from stack to 16b register")
      (param (base reg8 (unsigned)) (base-src OA))
   )
   (E490 E49F POP
      (desc "Pop signed byte from stack to 16b register")
      (param (base reg8 (signed)) (base-src OA))
   )
   (E4A0 E4AF POP
      (desc "Pop word from stack to 16b register")
      (param (base reg16) (base-src OA))
   )
   (E4B0 E4BF POP
      (desc "Pop double word from stack to 32b register")
      (param (base reg32) (base-src OA))
   )
   (E4C0 E4CF PUSH
      (desc "Push byte to stack from 16b register")
      (param (base reg8) (base-src OA))
   )
   (E4D0 E4DF PUSH
      (desc "Push word to stack from 16b register")
      (param (base reg16) (base-src OA))
   )
   (E4E0 E4EF PUSH
      (desc "Push double word to stack from 32b register")
      (param (base reg32) (base-src OA))
   )
   (E4F0 E4FF C
      (desc "Copy 32b register to base pointer")
      (param (base reg32) (base-src OA))
      (param -> (base sr bp))
   )
   (E800 E8FF LD
      (desc "Load unsigned byte using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg8 (unsigned)) (base-src OB))
   )
   (E900 E9FF LD
      (desc "Load signed byte using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg8 (signed)) (base-src OB))
   )
   (EA00 EAFF LD
      (desc "Load 16b register using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OB))
   )
   (EB00 EBFF LD
      (desc "Load 32b register using pointer to data memory")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg32) (base-src OB))
   )
   (EC00 ECFF LD
      (desc "Load unsigned byte using pointer to data memory with 16b register offset")
      (param (address data) (base reg32) (offset reg16 (unsigned)) (base-src OA) (offset-src OB))
      (param -> (base reg8 (index 0 0) (unsigned)))
   )
   (ED00 EDFF LD
      (desc "Load signed byte using pointer to data memory with 16b register offset")
      (param (address data) (base reg32) (offset reg16 (unsigned)) (base-src OA) (offset-src OB))
      (param -> (base reg8 (index 0 0) (signed)))
   )
   (EE00 EEFF LD
      (desc "Load 16b register using pointer to data memory with 16b register offset")
      (param (address data) (base reg32) (offset reg16 (unsigned)) (base-src OA) (offset-src OB))
      (param -> (base reg16 (index 0 0)))
   )
   (EF00 EFFF LD
      (desc "Load 32b register using pointer to data memory with 16b register offset")
      (param (address data) (base reg32) (offset reg16 (unsigned)) (base-src OA) (offset-src OB))
      (param -> (base reg32 (index 0 0)))
   )
   (F000 F0FF MUL
      (desc "Multiply 16b register by immediate, truncate result to 16b and store in another register")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
      (param -> (base reg16) (base-src OB))
   )
   (F100 F1FF MUL
      (desc "Multiply 16b registers, truncate result to 16b")
      (param (base reg16) (base-src OA))
      (param (base reg16) (base-src OB))
      (param -> (base reg16) (base-src OA))
   )
   (F200 F2FF MULH
      (desc "Multiply 16b unsigned registers, store high 16b of result")
      (param (base reg16 (unsigned)) (base-src OA))
      (param (base reg16 (unsigned)) (base-src OB))
      (param -> (base reg16 (unsigned)) (base-src OA))
   )
   (F300 F3FF MULH
      (desc "Multiply 16b unsigned registers, store high 16b of result")
      (param (base reg16 (unsigned)) (base-src OA))
      (param (base reg16 (signed)) (base-src OB))
      (param -> (base reg16 (signed)) (base-src OA))
   )
   (F400 F4FF MULH
      (desc "Multiply 16b unsigned registers, store high 16b of result")
      (param (base reg16 (signed)) (base-src OA))
      (param (base reg16 (unsigned)) (base-src OB))
      (param -> (base reg16 (signed)) (base-src OA))
   )
   (F500 F5FF MULH
      (desc "Multiply 16b unsigned registers, store high 16b of result")
      (param (base reg16 (signed)) (base-src OA))
      (param (base reg16 (signed)) (base-src OB))
      (param -> (base reg16 (signed)) (base-src OA))
   )
   (F600 F6FF MUL
      (desc "Multiply 16b unsigned registers, store 32b result")
      (param (base reg16 (unsigned)) (base-src OA))
      (param (base reg16 (unsigned)) (base-src OB))
      (param -> (base reg32 (index 0 0) (unsigned)))
   )
   (F700 F7FF MUL
      (desc "Multiply 16b signed registers, store 32b result")
      (param (base reg16 (signed)) (base-src OA))
      (param (base reg16 (signed)) (base-src OB))
      (param -> (base reg32 (index 0 0) (signed)))
   )
   (F800 F8FF MUL
      (desc "Multiply 16b unsigned and signed registers, store 32b result")
      (param (base reg16 (unsigned)) (base-src OA))
      (param (base reg16 (signed)) (base-src OB))
      (param -> (base reg32 (index 0 0) (signed)))
   )
   (FA00 FA0F SRS
      (desc "Switch to registerset")
      (param (base reg16) (base-src OA))
   )
   (FA40 FA4F CMP
      (desc "Compare 16b register to immediate")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
   )
   (FA50 FA5F CMPB
      (desc "Compare 16b register to immediate, with borrow")
      (param (base reg16) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535) (alt-range 0 32767) (alt-range -32768 -1))
   )
   (FA60 FA6F CMP
      (desc "Compare 32b register to immediate")
      (param (base reg32) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535))
   )
   (FA70 FA7F CMP
      (desc "Compare 32b register to immediate")
      (param (base reg32) (base-src OA))
      (param (base constant) (base-src IP_plus_2_16) (range -65536 -1))
   )
   (FA80 FA8F CALL
      (desc "Call register-addressed subroutine")
      (param (address insn) (base reg32) (base-src OA))
   )
   (FAB0 FABF B
      (desc "Register unconditional branch")
      (param (address insn) (base reg32) (base-src OA))
   )
   (FAE0 FAEF C
      (desc "Copy return pointer to 32b register")
      (param (base sr rp))
      (param -> (base reg32) (base-src OA))
   )
   (FAF0 FAFF C
      (desc "Copy 32b register to return pointer")
      (param (base reg32) (base-src OA))
      (param -> (base sr rp))
   )
   (FB00 FB0F C
      (desc "Copy immediate to 16b register")
      (param (base constant) (base-src IP_plus_2_8) (range 0 255))
      (param -> (base reg16) (base-src OA))
   )
   (FB10 FB1F C
      (desc "Copy immediate to 32b register")
      (param (base constant) (base-src IP_plus_2_8) (range 0 255))
      (param -> (base reg32) (base-src OA))
   )
   (FB20 FB2F C
      (desc "Copy immediate to 16b register")
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535))
      (param -> (base reg16) (base-src OA))
   )
   (FB30 FB3F C
      (desc "Copy immediate to 32b register")
      (param (base constant) (base-src IP_plus_2_16) (range 0 65535))
      (param -> (base reg32) (base-src OA))
   )
   (FB40 FB4F C
      (desc "Copy immediate to 32b register")
      (param (base constant) (base-src IP_plus_2_16) (range -65536 -1))
      (param -> (base reg32) (base-src OA))
   )
   (FB50 FB5F C
      (desc "Copy immediate to 32b register")
      (param (base constant) (base-src IP_plus_2_32) (range 0 4294967295) (alt-range 0 2147483647) (alt-range -2147483648 -1))
      (param -> (base reg32) (base-src OA))
   )
   (FB60 FB6F C
      (desc "16b three register copy or swap")
      (param (base reg16) (base-src OA))
      (param -> (base reg16) (base-src IP_plus_2_OA))
      (param -> (base reg16) (base-src IP_plus_2_OB))
   )
   (FB70 FB7F C
      (desc "32b three register copy or swap")
      (param (base reg32) (base-src OA))
      (param -> (base reg32) (base-src IP_plus_2_OA))
      (param -> (base reg32) (base-src IP_plus_2_OB))
   )
   (FB80 FB8F C
      (desc "Copy 32b register to stack pointer")
      (param (base reg32) (base-src OA))
      (param -> (base sr sp))
   )
   (FBD0 FBDF C
      (desc "Copy status register to 16b register")
      (param (base sr stat))
      (param -> (base reg16) (base-src OA))
   )
   (FBE0 FBEF C
      (desc "Copy 16b register to status register (flags only)")
      (param (base reg16) (base-src OA))
      (param -> (base sr stat))
   )
   (FBF0 FBFF C
      (desc "Copy base pointer to 32b register")
      (param (base sr bp))
      (param -> (base reg32) (base-src OA))
   )
   (FD00 FDFF LDRS
      (desc "Load registerset")
      (param (address data) (base reg32) (base-src OA))
      (param -> (base reg16) (base-src OB))
   )
   (FE00 FEFF STRS
      (desc "Store registerset")
      (param (base reg16) (base-src OB))
      (param -> (address data) (base reg32) (base-src OA))
   )
   (0100 0100 B
      (desc "IP-relative unconditional branch to IP+3; equivalent to NOPE")
      (param (address insn) (base sr ip) (offset constant) (offset-src opcode) (range 3 3))
   )
   (1F00 1F0F SAT W
      (desc "Set address translation entry corresponding to X0 with data in Xa; discard secondary entry if necessary")
      (param (base reg32) (base-src OA))
   )
   (1F10 1F1F SAT R
      (desc "Set address translation entry corresponding to X0 with data in Xa; discard secondary entry if necessary")
      (param (base reg32) (base-src OA))
   )
   (1F20 1F2F SAT S
      (desc "Set address translation entry corresponding to X0 with data in Xa; discard secondary entry if necessary")
      (param (base reg32) (base-src OA))
   )
   (1F30 1F3F SAT I
      (desc "Set address translation entry corresponding to X0 with data in Xa; discard secondary entry if necessary")
      (param (base reg32) (base-src OA))
   )
)